// Generated by CoffeeScript 1.6.2
var NodeResourceMonitor, os, _;

os = require('os');

_ = require('lodash');

NodeResourceMonitor = (function() {
  function NodeResourceMonitor() {
    this.data = {
      timestamp: [],
      total_memory: [],
      free_memory: [],
      cpu_user: [],
      cpu_sys: [],
      cpu_idle: [],
      mem_rss: [],
      mem_heap_total: [],
      mem_heap_used: []
    };
  }

  NodeResourceMonitor.prototype.getTimestamp = function() {
    return parseInt((new Date().getTime()) / 1000);
  };

  NodeResourceMonitor.prototype.getUptime = function() {
    return os.uptime();
  };

  NodeResourceMonitor.prototype.getHostname = function() {
    return os.hostname();
  };

  NodeResourceMonitor.prototype.getPlatform = function() {
    return os.platform();
  };

  NodeResourceMonitor.prototype.getArch = function() {
    return os.arch();
  };

  NodeResourceMonitor.prototype.getRelease = function() {
    return os.release();
  };

  NodeResourceMonitor.prototype.getTotalMemory = function() {
    return os.totalmem();
  };

  NodeResourceMonitor.prototype.getFreeMemory = function() {
    return os.freemem();
  };

  NodeResourceMonitor.prototype.getCpuUsage = function() {
    var fn_reduce, init_val, usage;

    init_val = {
      user: 0,
      sys: 0,
      idle: 0,
      total: 0
    };
    fn_reduce = function(mem, val) {
      var times;

      times = val.times;
      mem.user += times.user;
      mem.sys += times.sys;
      mem.idle += times.idle;
      return mem;
    };
    usage = _.reduce(os.cpus(), fn_reduce, init_val);
    usage.total = usage.user + usage.sys + usage.idle;
    return usage;
  };

  NodeResourceMonitor.prototype.getMemoryUsage = function() {
    return process.memoryUsage();
  };

  NodeResourceMonitor.prototype.start = function(interval, max_points) {
    if (interval == null) {
      interval = 5000;
    }
    if (max_points == null) {
      max_points = 8640;
    }
  };

  NodeResourceMonitor.prototype.stop = function() {};

  NodeResourceMonitor.prototype.get = function() {};

  return NodeResourceMonitor;

})();

module.exports = NodeResourceMonitor;
